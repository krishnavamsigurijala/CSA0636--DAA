#include <stdio.h>
#include <limits.h>

#define MAX_NODES 10

int optimalBSTCost(int keys[], int freq[], int n) {
    int cost[n + 1][n + 1];

    for (int i = 0; i < n; i++) {
        cost[i][i] = freq[i];
    }

    for (int L = 2; L <= n; L++) {
        for (int i = 0; i <= n - L + 1; i++) {
            int j = i + L - 1;
            cost[i][j] = INT_MAX;

            for (int r = i; r <= j; r++) {
                int c = ((r > i) ? cost[i][r - 1] : 0) +
                        ((r < j) ? cost[r + 1][j] : 0) +
                        freq[i] + ((r > i) ? freq[j] : 0);

                if (c < cost[i][j]) {
                    cost[i][j] = c;
                }
            }
        }
    }

    return cost[0][n - 1];
}

int main() {
    int n;
    printf("Enter the number of keys: ");
    scanf("%d", &n);

    int keys[MAX_NODES], freq[MAX_NODES];
    printf("Enter the keys:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &keys[i]);
    }

    printf("Enter the frequencies:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &freq[i]);
    }

    int totalCost = optimalBSTCost(keys, freq, n);
    printf("Total cost of optimal binary search tree: %d\n", totalCost);

    return 0;
}
/*OUTPUT:
Enter the number of keys: 3
Enter the keys:
2 3  5
Enter the frequencies:
15 16 17
Total cost of optimal binary search tree: 48

--------------------------------
Process exited after 16.29 seconds with return value 0
Press any key to continue . . .*/
